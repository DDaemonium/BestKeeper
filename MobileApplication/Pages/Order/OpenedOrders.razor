@page "/orders"
@using Domain.Data.Identity
@using Domain.Dto.Response.Order
@using MobileApplication.Service
@using SharedApplicationsData.Service.Identity

@inject IdentityManager IdentityManager
@inject OrderService OrderService

<PageTitle>Мои заказы</PageTitle>

<h3>Мои заказы</h3>

@if (openedOrders is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" style="max-width:600px;">
        <thead>
            <tr>
                <th>Детали</th>
                <th>Дата открытия</th>
                <th>Стол</th>
                <th>Действие</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var openedOrder in openedOrders)
            {
                <tr>
                    <td><a href="@($"order?id={openedOrder.Id}")">Открыть</a></td>
                    <td>@openedOrder.Opened</td>
                    <td>@openedOrder.TableName</td>
                    <td><button @onclick=@(() => CloseOrder(openedOrder)) type="button" class="btn alert-danger">Закрыть</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<OrderInfo>? openedOrders;

    protected override async Task OnInitializedAsync()
    {
        if (!IdentityManager.CheckAuthorizationWithRedirect(RoleConstants.Administrator, RoleConstants.Waiter))
        {
            return;
        }

        openedOrders = await OrderService.GetOpenedOrdersOfCurrentUserAsync();
    }

    private async Task CloseOrder(OrderInfo order)
    {
        await OrderService.CloseOrderAsync(order.Id, "Заказ выполнен");
        openedOrders?.Remove(order);
    }
}
