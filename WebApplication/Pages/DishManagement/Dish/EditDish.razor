@page "/dishes/edit"
@using Domain.Data.Identity
@using Domain.Dto.Request.Dish
@using Domain.Dto.Response.Dish
@using System.Timers
@using WebApplication.Service.DishManagement
@using WebApplication.Service.Identity

@inject IdentityManager IdentityManager
@inject NavigationManager NavigationManager
@inject CategoryService CategoryService
@inject DishService DishService

<PageTitle>Редактирование блюда</PageTitle>

<h3>Редактирование блюда</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<a href="dishes" class="btn btn-primary">Назад</a>

@if (dishInfo is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form style="max-width:800px;">
        <div class="form-row">
            <div class="form-group col-md-6">
                <label for="inputName">Название</label>
                <input @bind-value="@dishInfo.Name" class="form-control" id="inputName" placeholder="Борщ">
            </div>
            <div class="form-group col-md-6">
                <label for="inputDescription">Описание</label>
                <textarea @bind="@dishInfo.Description" class="form-control" id="inputDescription" aria-label="Описание"></textarea>
            </div>
            <div class="form-group col-md-6">
                <label for="inputIngredients">Ингредиенты</label>
                <textarea @bind="@dishInfo.Ingredients" class="form-control" id="inputIngredients" aria-label="Ингредиенты"></textarea>
            </div>
            <div class="form-group col-md-6">
                <label for="inputWeight">Вес (гр)</label>
                <input type="number" @bind-value="@dishInfo.GramWeight" class="form-control" id="inputWeight">
            </div>
            <div class="form-group col-md-6">
                <label for="inputCost">Стоимость ₽</label>
                <input type="number" @bind-value="@dishInfo.Cost" class="form-control" id="inputCost">
            </div>
            <div class="form-group col-md-6">
                <label for="inputCategory">Категория</label>
                <select @onchange="OnCategoryChanged" id="inputCategory" style="max-width:300px;" class="form-select" aria-label="Категории">
                    @foreach (var categiory in categories)
                    {
                        @if (categiory.Id == dishInfo.DishCategoryId)
                        {
                            <option selected value="@(categiory.Id)">@categiory.Name</option>
                        }
                        else
                        {
                            <option value="@(categiory.Id)">@categiory.Name</option>
                        }

                }
                </select>
            </div>
        </div>
        <div class="form-group">
            <div class="form-check">
                <input @bind="@dishInfo.IsAvailabel" class="form-check-input" type="checkbox" id="availabelCheck">
                <label class="form-check-label" for="availabelCheck">
                    В наличии
                </label>
            </div>
        </div>
        <br />
        <a @onclick="@UpdateDish" class="btn btn-success">Сохранить</a>
        <a @onclick="@DeleteDish" class="btn btn-danger">Удалить</a>
    </form>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public Guid? CurrentDishId { get; set; }

    private List<CategoryInfo>? categories;
    private DishInfo? dishInfo;
    private string? successMessage;
    private string? errorMessage;
    private System.Timers.Timer? successAlertTimer;
    private System.Timers.Timer? errorAlertTimer;

    protected override async Task OnInitializedAsync()
    {
        if (!IdentityManager.CheckAuthorizationWithRedirect(RoleConstants.Administrator, RoleConstants.Manager))
        {
            return;
        }

        if (successAlertTimer is null && errorAlertTimer is null)
        {
            successAlertTimer = new System.Timers.Timer(5000);
            successAlertTimer.Elapsed += (object? sender, ElapsedEventArgs e) =>
            {
                successMessage = null;
                successAlertTimer.Stop();
            };

            errorAlertTimer = new System.Timers.Timer(5000);
            errorAlertTimer.Elapsed += (object? sender, ElapsedEventArgs e) =>
            {
                errorMessage = null;
                errorAlertTimer.Stop();
            };
        }

        if(CurrentDishId is not null)
        {
            dishInfo = await DishService.GetDishByIdAsync(CurrentDishId.Value);
            categories = await CategoryService.GetAllCategoriesAsync();
        }
    }

    private void OnCategoryChanged(ChangeEventArgs e)
    {
        Guid selectedCategoryId = Guid.Parse(e.Value.ToString());
        dishInfo.DishCategoryId = selectedCategoryId;
    }

    private async Task UpdateDish()
    {
        if(dishInfo is null)
        {
            return;
        }

        var dish = await DishService.UpdateDishAsync(new UpdateDish
        {
            Id = dishInfo.Id,
            Name = dishInfo.Name,
            Description = dishInfo.Description,
            Ingredients = dishInfo.Ingredients,
            DishCategoryId = dishInfo.DishCategoryId,
            Cost = dishInfo.Cost,
            GramWeight = dishInfo.GramWeight,
            IsAvailabel = dishInfo.IsAvailabel,
        });

        if(dish is not null)
        {
            SetSuccessAlert("Блюдо успешно изменено.");
            dishInfo = dish;
        }
        else
        {
            SetErrorAlert("Произошла ошибка при изменении блюда.");
        }
    }

    private async Task DeleteDish()
    {
        if (CurrentDishId is null)
        {
            return;
        }

        await DishService.DeleteDishAsync(CurrentDishId.Value);
        NavigationManager.NavigateTo("dishes");
    }

    private void SetSuccessAlert(string message)
    {
        if (successAlertTimer is not null)
        {
            successAlertTimer.Stop();
            successMessage = message;
            successAlertTimer.Start();
        }
    }

    private void SetErrorAlert(string message)
    {
        if (errorAlertTimer is not null)
        {
            errorAlertTimer.Stop();
            errorMessage = message;
            errorAlertTimer.Start();
        }
    }
}
